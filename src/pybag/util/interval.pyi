# -*- coding: utf-8 -*-
# Stubs for pybag.util.interval (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Tuple
from typing import Iterator
from typing import Optional


class PyDisjointIntervals:
    @property
    def start(self) -> int: ...
    @property
    def stop(self) -> int: ...
    def __init__(self) -> None: ...
    def __contains__(self, key: Tuple[int, int]) -> bool: ...
    def __iter__(self) -> Iterator[Tuple[int, int]]: ...
    def __len__(self) -> int: ...
    def add(self, intv: Tuple[int, int], val: object = None, merge: bool = False, abut: bool = False) -> bool: ...
    def covers(self, key: Tuple[int, int]) -> bool: ...
    def get_complement(self, total_intv: Tuple[int, int]) -> PyDisjointIntervals: ...
    def get_copy(self) -> PyDisjointIntervals: ...
    def get_first_overlap_item(self, key: Tuple[int, int]) -> Optional[Tuple[Tuple[int, int], object]]: ...
    def get_intersection(self, other: PyDisjointIntervals) -> PyDisjointIntervals: ...
    def get_transform(self, scale: int = 1, shift: int = 0) -> PyDisjointIntervals: ...
    def intervals(self) -> Iterator[Tuple[int, int]]: ...
    def items(self) -> Iterator[Tuple[Tuple[int, int], object]]: ...
    def overlap_intervals(self, key: Tuple[int, int]) -> Iterator[Tuple[int, int]]: ...
    def overlap_items(self, key: Tuple[int, int]) -> Iterator[Tuple[Tuple[int, int], object]]: ...
    def overlap_values(self, key: Tuple[int, int]) -> Iterator[object]: ...
    def overlaps(self, key: Tuple[int, int]) -> bool: ...
    def remove(self, key: Tuple[int, int]) -> bool: ...
    def remove_overlaps(self, key: Tuple[int, int]) -> bool: ...
    def subtract(self, key: Tuple[int, int]) -> bool: ...
    def values(self) -> Iterator[object]: ...


