# -*- coding: utf-8 -*-
# Stubs for pybag.util.geometry (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Optional
from typing import Tuple
from typing import overload
from typing import Iterator
from typing import Iterable


class BBox:
    @property
    def bottom_unit(self) -> int: ...
    @property
    def h(self) -> int: ...
    @property
    def height_unit(self) -> int: ...
    @property
    def left_unit(self) -> int: ...
    @property
    def right_unit(self) -> int: ...
    @property
    def top_unit(self) -> int: ...
    @property
    def w(self) -> int: ...
    @property
    def width_unit(self) -> int: ...
    @property
    def xc_unit(self) -> int: ...
    @property
    def xh(self) -> int: ...
    @property
    def xl(self) -> int: ...
    @property
    def xm(self) -> int: ...
    @property
    def yc_unit(self) -> int: ...
    @property
    def yh(self) -> int: ...
    @property
    def yl(self) -> int: ...
    @property
    def ym(self) -> int: ...
    def __init__(self, xl: int, yl: int, xh: int, yh: int, *args, **kwargs) -> None: ...
    def __eq__(self, other: BBox) -> bool: ...
    def as_bbox_array(self) -> BBoxArray: ...
    def as_bbox_collection(self) -> BBoxCollection: ...
    def expand(self, dx: int = 0, dy: int = 0, unit_mode: bool = True) -> BBox: ...
    def extend(self, x: Optional[int] = None, y: Optional[int] = None, unit_mode: bool = True) -> BBox: ...
    def flip_xy(self) -> BBox: ...
    def get_immutable_key(self) -> Tuple[int, int, int, int]: ...
    @staticmethod
    def get_invalid_bbox() -> BBox: ...
    def intersect(self, bbox: BBox) -> BBox: ...
    def is_physical(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def merge(self, bbox: BBox) -> BBox: ...
    def move_by(self, dx: int = 0, dy: int = 0, unit_mode: bool = True) -> BBox: ...
    def overlaps(self, bbox: BBox) -> bool: ...
    @overload
    def transform(self, dx: int = 0, dy: int = 0, ocode: int = 0) -> BBox: ...
    @overload
    def transform(self, loc: Tuple[int, int] = (0, 0), orient: str = 'R0', unit_mode: bool = True) -> BBox: ...


class BBoxArray:
    @property
    def base(self) -> BBox: ...
    @property
    def bottom_unit(self) -> int: ...
    @property
    def left_unit(self) -> int: ...
    @property
    def nx(self) -> int: ...
    @property
    def ny(self) -> int: ...
    @property
    def right_unit(self) -> int: ...
    @property
    def spx_unit(self) -> int: ...
    @property
    def spy_unit(self) -> int: ...
    @property
    def top_unit(self) -> int: ...
    @property
    def xc_unit(self) -> int: ...
    @property
    def xh(self) -> int: ...
    @property
    def xl(self) -> int: ...
    @property
    def xm(self) -> int: ...
    @property
    def yc_unit(self) -> int: ...
    @property
    def yh(self) -> int: ...
    @property
    def yl(self) -> int: ...
    @property
    def ym(self) -> int: ...
    def __init__(self, base: BBox, nx: int = 1, ny: int = 1, spx: int = 0, spy: int = 0, **kwargs) -> None: ...
    def __eq__(self, other: BBoxArray) -> bool: ...
    def __iter__(self) -> Iterator[BBox]: ...
    def as_bbox(self) -> BBox: ...
    def as_bbox_collection(self) -> BBoxCollection: ...
    def get_bbox(self, idx: int) -> BBox: ...
    def get_overall_bbox(self) -> BBox: ...
    def move_by(self, dx: int = 0, dy: int = 0, unit_mode: bool = True) -> BBoxArray: ...
    @overload
    def transform(self, dx: int = 0, dy: int = 0, ocode: int = 0) -> BBoxArray: ...
    @overload
    def transform(self, loc: Tuple[int, int] = (0, 0), orient: str = 'R0', unit_mode: bool = True) -> BBoxArray: ...


class BBoxCollection:
    def __init__(self, data: Iterable[BBoxArray]) -> None: ...
    def __eq__(self, other: BBoxCollection) -> bool: ...
    def __iter__(self) -> Iterator[BBoxArray]: ...
    def __len__(self) -> int: ...
    def as_bbox(self) -> BBox: ...
    def as_bbox_array(self) -> BBoxArray: ...
    def get_bounding_box(self) -> BBox: ...
    @overload
    def transform(self, dx: int = 0, dy: int = 0, ocode: int = 0) -> BBoxCollection: ...
    @overload
    def transform(self, loc: Tuple[int, int] = (0, 0), orient: str = 'R0', unit_mode: bool = True) -> BBoxCollection: ...


