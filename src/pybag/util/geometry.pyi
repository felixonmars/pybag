# -*- coding: utf-8 -*-
# Stubs for pybag.util.geometry (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Tuple, Optional, Iterable, Iterator

class BBox:
    def __init__(self, *args, **kwargs) -> Any: ...
    def as_bbox_array(self) -> BBoxArray: ...
    def as_bbox_collection(self) -> BBoxCollection: ...
    def expand(self, dx: int = 0, dy: int = 0, unit_mode: bool = True) -> BBox: ...
    def extend(self, x: Optional[int] = None, y: Optional[int] = None, unit_mode: bool = True) -> BBox: ...
    def flip_xy(self) -> BBox: ...
    def get_immutable_key(self) -> Tuple[int, int, int, int]: ...
    @classmethod
    def get_invalid_bbox(cls) -> BBox: ...
    def intersect(self, bbox: BBox) -> BBox: ...
    def is_physical(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def merge(self, bbox: BBox) -> BBox: ...
    def move_by(self, dx: int = 0, dy: int = 0, unit_mode: bool = True) -> BBox: ...
    def overlaps(self, bbox: BBox) -> bool: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: BBox) -> bool: ...
    @property
    def bottom_unit(self) -> int: ...
    @property
    def h(self) -> int: ...
    @property
    def height_unit(self) -> int: ...
    @property
    def left_unit(self) -> int: ...
    @property
    def right_unit(self) -> int: ...
    @property
    def top_unit(self) -> int: ...
    @property
    def w(self) -> int: ...
    @property
    def width_unit(self) -> int: ...
    @property
    def xc_unit(self) -> int: ...
    @property
    def xh(self) -> int: ...
    @property
    def xl(self) -> int: ...
    @property
    def xm(self) -> int: ...
    @property
    def yc_unit(self) -> int: ...
    @property
    def yh(self) -> int: ...
    @property
    def yl(self) -> int: ...
    @property
    def ym(self) -> int: ...

class BBoxArray:
    def __init__(self, *args, **kwargs) -> Any: ...
    def as_bbox(self) -> BBox: ...
    def as_bbox_collection(self) -> BBoxCollection: ...
    def get_bbox(self, idx: int) -> BBox: ...
    def get_overall_bbox(self) -> BBox: ...
    def move_by(self, dx: int = 0, dy: int = 0, unit_mode: bool = True) -> BBoxArray: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: BBoxArray) -> bool: ...
    def __iter__(self) -> Iterator[BBox]: ...
    @property
    def base(self) -> BBox: ...
    @property
    def bottom_unit(self) -> int: ...
    @property
    def left_unit(self) -> int: ...
    @property
    def nx(self) -> int: ...
    @property
    def ny(self) -> int: ...
    @property
    def right_unit(self) -> int: ...
    @property
    def spx_unit(self) -> int: ...
    @property
    def spy_unit(self) -> int: ...
    @property
    def top_unit(self) -> int: ...
    @property
    def xc_unit(self) -> int: ...
    @property
    def xh(self) -> int: ...
    @property
    def xl(self) -> int: ...
    @property
    def xm(self) -> int: ...
    @property
    def yc_unit(self) -> int: ...
    @property
    def yh(self) -> int: ...
    @property
    def yl(self) -> int: ...
    @property
    def ym(self) -> int: ...

class BBoxCollection:
    def __init__(self, data: Iterable[BBoxArray]) -> None: ...
    def as_bbox(self) -> BBox: ...
    def as_bbox_array(self) -> BBoxArray: ...
    def get_bounding_box(self) -> BBox: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: BBoxCollection) -> bool: ...
    def __iter__(self) -> Iterator[BBoxArray]: ...
    def __len__(self) -> int: ...
